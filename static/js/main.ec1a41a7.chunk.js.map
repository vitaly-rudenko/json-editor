{"version":3,"sources":["App.js","index.js"],"names":["Type","PRIMITIVE","OBJECT","isObject","value","Field","source","Object","classCallCheck","this","id","shortid","type","parentChain","key","undefined","length","buildObject","fields","result","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","field","parent","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","parentKey","err","return","levelColors","Node","React","forwardRef","_ref4","ref","props","index","onDrag","objectWithoutProperties","react_default","a","createElement","assign","className","style","_objectSpread","marginLeft","concat","level","backgroundColor","toString","String","object","hello","isEnabled","nested","lorem","secretNumber","nested2","jon","inception","hello2","isEnabled2","nested3","lorem2","secretNumber2","nested4","ReactDOM","render","_useState","useState","flatten","arguments","_i","_Object$entries","entries","_ref3","_ref2","slicedToArray","push","apply","toConsumableArray","_useState2","setFields","objectRepresentation","useMemo","JSON","stringify","useEffect","console","log","onDragEnd","useCallback","destination","before","after","beforeDestination","destinationSample","children","chain","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","startsWith","updatedField","updatedFields","splice","indexOf","_i2","_children","child","updatedChildren","map","updatedChild","slice","react_beautiful_dnd_esm","droppableId","provided","droppableProps","innerRef","draggableId","draggableProps","dragHandleProps","placeholder","readOnly","document","getElementById"],"mappings":"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","file":"static/js/main.ec1a41a7.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport shortid from 'shortid';\nimport './styles.css';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nconst Type = {\n    PRIMITIVE: 'primitive',\n    OBJECT: 'object',\n};\n\nconst isObject = (value) => {\n    return typeof value === 'object' && value !== null;\n};\n\nclass Field {\n    /** @type {string} */ id;\n    /** @type {string} */ type;\n    /** @type {string[]} */ parentChain;\n    /** @type {string} */ key;\n    /** @type {any} */ value;\n\n    constructor(source) {\n        this.id = source.id || shortid();\n        this.type = source.type || (isObject(source.value) ? Type.OBJECT : Type.PRIMITIVE);\n        this.parentChain = source.parentChain;\n        this.key = source.key;\n        this.value = isObject(source.value) ? undefined : source.value;\n    }\n\n    get level() {\n        return this.parentChain.length;\n    }\n}\n\nconst flatten = (object, parentChain = []) => {\n    const fields = [];\n\n    for (const [key, value] of Object.entries(object)) {\n        fields.push(\n            new Field({\n                key, value, parentChain,\n            })\n        );\n\n        if (isObject(value)) {\n            fields.push(\n                ...flatten(value, [...parentChain, key])\n            );\n        }\n    }\n\n    return fields;\n};\n\n/** @param {Field[]} fields */\nconst buildObject = (fields) => {\n    const result = {};\n\n    for (const field of fields) {\n        let parent = result;\n\n        for (const parentKey of field.parentChain) {\n            if (parent[parentKey] === undefined) {\n                parent[parentKey] = {};\n            }\n\n            parent = parent[parentKey];\n        }\n\n        parent[field.key] = field.value === undefined ? {} : field.value;\n    }\n\n    return result;\n};\n\nconst levelColors = [0xcfe2f1, 0xfeffa0, 0xf3d1d4, 0xcfffd0];\n\nconst stringify = (value) => {\n    if (typeof value === 'string') {\n        return '\"' + value + '\"';\n    }\n\n    if (value === undefined) {\n        return '{}';\n    }\n\n    return String(value);\n};\n\nconst Node = React.forwardRef(\n    /** @param {{ field: Field }} props */\n    ({ field, index = 0, onDrag, ...props }, ref) => {\n        return (\n            <div\n                ref={ref}\n                {...props}\n                className=\"node\"\n                style={{\n                    ...props.style || {},\n                    marginLeft: `${field.level * 16}px`,\n                    backgroundColor:\n                        '#' + levelColors[field.level % levelColors.length].toString(16)\n                }}\n            >\n                {field.key}: {stringify(field.value)}\n            </div>\n        );\n    }\n);\n\nconst object = {\n    hello: 'world',\n    isEnabled: true,\n    nested: {\n        lorem: 'ipsum',\n        secretNumber: 123,\n        nested2: {\n            jon: 'snow'\n        }\n    },\n    inception: {\n        hello2: 'world',\n        isEnabled2: true,\n        nested3: {\n            lorem2: 'ipsum',\n            secretNumber2: 123,\n            nested4: {\n                jon: 'snow'\n            }\n        }\n    },\n};\n\nexport const App = () => {\n    /** @type {[Field[], (fields: Field[]) => void]} */\n    const [fields, setFields] = useState(flatten(object));\n    const objectRepresentation = useMemo(\n        () => JSON.stringify(buildObject(fields), null, 4),\n        [fields]\n    );\n\n    useEffect(() => {\n        console.log(JSON.stringify(buildObject(fields), null, 4));\n    }, [fields]);\n\n    const onDragEnd = useCallback((result) => {\n        if (!result.destination) {\n            return;\n        }\n\n        const source = result.source.index;\n        const destination = result.destination.index;\n\n        if (source === destination) {\n            return;\n        }\n\n        const field = fields[source];\n        const before = source > destination ? destination - 1 : destination;\n        const after = source > destination ? destination : destination + 1;\n        const beforeDestination = fields[before];\n        const afterDestination = fields[after];\n\n        const destinationSample = afterDestination || beforeDestination;\n\n        const children = [];        \n        const chain = [...field.parentChain, field.key];\n        if (field.type === Type.OBJECT) {\n            for (const field of fields) {\n                if (field.parentChain.toString().startsWith(chain.toString())) {\n                    children.push(field);\n                }\n            }\n        }\n\n        // TODO: same key problem\n        // TODO: move object inside itself\n        // TODO: move inside empty object\n\n        const updatedField = new Field(field);\n        updatedField.parentChain = destinationSample.parentChain;\n\n        const updatedFields = [...fields];\n        updatedFields.splice(before + 1, 0, updatedField);\n        updatedFields.splice(updatedFields.indexOf(field), 1);\n\n        for (const child of children) {\n            updatedFields.splice(updatedFields.indexOf(child), 1);\n        }\n\n        const updatedChildren = children.map((child) => {\n            const updatedChild = new Field(child);\n\n            updatedChild.parentChain = [\n                ...updatedField.parentChain,\n                updatedField.key,\n                ...child.parentChain.slice(chain.length)\n            ];\n\n            return updatedChild;\n        });\n\n        updatedFields.splice(updatedFields.indexOf(updatedField) + 1, 0, ...updatedChildren);\n\n        setFields(updatedFields);\n    }, [fields]);\n\n    return (\n        <div>\n            <div>\n                <DragDropContext onDragEnd={onDragEnd}>\n                    <Droppable droppableId=\"droppable\">\n                        {(provided) => (\n                            <div\n                                {...provided.droppableProps}\n                                ref={provided.innerRef}\n                                className=\"node-list\">\n                                {fields.map((field, index) => (\n                                    <Draggable\n                                        key={field.id}\n                                        draggableId={field.id}\n                                        index={index}>\n                                        {(provided) => (\n                                            <Node\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                index={index}\n                                                field={field}\n                                            />\n                                        )}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            </div>\n\n            <div>\n                <textarea key={objectRepresentation} readOnly={true} className=\"representation\" value={objectRepresentation}></textarea>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n// import { App } from './test';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}